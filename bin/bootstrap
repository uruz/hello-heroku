#!bash
# this file should be source-d, not exec-ed; the shebang above is just for syntax highlightingh

__ns() {
    __log() { echo $'\e[1;37m'"bootstrap: $@"$'\e[0m'; }
    __complain() { echo $'\e[1;31m'"bootstrap: $@"$'\e[0m'; }
    __warn() { echo $'\e[1;33m'"bootstrap: $@"$'\e[0m'; }
    __hint() { [ $(uname) = "$1" ] && __log "perhaps this would help: $2"; }


    if [ ! -e bin/bootstrap ] || ! grep magic-13f78f843201-magic bin/bootstrap > /dev/null; then
        __complain "source this script only from the toplevel of the working tree"
        return 1
    fi

    if ! which pg_config > /dev/null; then
        __complain "missing pg_config; so can't build psycopg2 (postgresql driver)"
        __hint Darwin "brew install postgres"
        __hint Linux "apt-get install libpq-dev"
        return 1
    fi


    __log 'updating submodules'
    git submodule update --init

    if [ ! -f .venv/bin/activate ]; then
        if which virtualenv2.7 > /dev/null; then
            __venv() { virtualenv2.7 "$@"; }
            if [ $(__venv --version | tr -d '.' | cut -c1-2) -lt 17 ]; then 
                __complain "your virtualenv is old; install a new one"
                return 1
            fi
        else
            if ! which python2.7 > /dev/null; then
                __complain "no virtualenv2.7 nor python2.7"
                __hint Darwin "brew install python"
                __hint Linux "apt-get install python2.7"
                return 1
            fi
            __warn "missing virtualenv2.7, bringing my own from the internet"
            __venv() { curl -Lfs https://raw.github.com/pypa/virtualenv/1.7/virtualenv.py | python2.7 - "$@"; }
        fi
        __log 'creating and activating virtualenv'
        __venv .venv || return 1
        cat >> .venv/bin/activate << EOF

[ -f "\$(dirname "\$VIRTUAL_ENV")"/bin/activate-local ] && source "\$(dirname "\$VIRTUAL_ENV")"/bin/activate-local
EOF
        source .venv/bin/activate
    fi

    __log 'a little bit of housekeeping...'
    export ARCHFLAGS='-arch i386 -arch x86_64' 
    [ -z "$PIP_DOWNLOAD_CACHE" ] && { mkdir -p ~/.pip/cache && export PIP_DOWNLOAD_CACHE=${HOME}/.pip/cache; }
    for filename in bin/*; do
        [ -x "$filename" ] && ln -s ../../"$filename" .venv/bin
    done
    [ ! -e .env ] && ln -s environment.dev .env

    __log 'installing development requirements'
    pip install -r <(./requirements.txt.dev)
    unset -f __log __complain __warn __hint __venv
}

__ns
